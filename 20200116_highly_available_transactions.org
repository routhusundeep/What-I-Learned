#+TITLE: Daily Notes Friday, 17/01/2020
** [[https://www.vldb.org/pvldb/vol7/p181-bailis.pdf][Highly available transactions]]                      :transactions:database:
- These are takeaways
  - The default configuration of most of the popular database systems expose a range of anomalies which may not be what the application desire
  - Many of the "weak isolation" models can be achieved without sacrificing high availability if implemented correctly. However, none of the achievable models provide concurrent modifications
  - In addition to providing guaranteed response and horizontal scale out, these HAT models allow one to three order of magnitude lower latencies on current infrastructure
  - For correct behaviours, applications may require combined usage of HAT and non-HAT(sparingly), database designers should take this into consideration
*** Why High Availability
- Network Partitions are very common at scale, Read the paper to get examples and statistics
- Latency is variable and highly dependant on the server location, so a closer server means better response
*** ACID in the Wild
- The below table summarises only for a few databases, read the paper to find more
- RC - read committed, RR - repeatable read, SI - snapshot isolation, S - serializability, CS - cursor stability, CR - consistent reads
| Database           | Default | Maximum |
|--------------------+---------+---------|
| Aerospike          | RC      | RC      |
| IBM DB2 for z/OS   | CS      | S       |
| MySQL 5.6          | RR      | S       |
| MS SQL Sever 2012  | RC      | S       |
| Oracle 11g         | RC      | SI      |
| Oracle Berkeley DB | S       | S       |
| Postgres 9.2.2     | RC      | S       |
| SAP HANA           | RC      | SI      |
| VoltDB             | S       | S       |
*** High Availability
- Informally Highly available algorithm ensures "always on" and low latency is a concomitant result
- The lack of fast path coordination results in the low latency
- traditionally, a system provides high availability if every user that can contact a correct(non-failing) server eventually receives a response from that server even in the presence of arbitrary, indefinitely long network partitions between the servers of the system
**** Sticky Availability
- clients can contact the same set of logical replica(s) across subsequent operations, this is called stickiness
- we say that a system provides sticky availability if, whenever a client's transaction is executed across a copy of database state that reflects all the clients previous operations, it eventually gives a response even in the presence of network partitions
*** Transactional Availability
- We say a transaction has replica availability, if it can contact at least one replica for every item it attempts to access
- We need to ensure useful forward progress, that is we require a liveness property
- so under the availability, the transaction eventually completes, but may require multiple retries
- sticky transactional availability can also be defined
*** Highly Available Transactions
**** Achievable HAT semantic
- ACID Isolation guarantees
  - Read Uncommitted
    - writes are ordered but reads are not
  - Read Committed
    - prohibit dirty writes and dirty reads
    - normally provides recency and monotonic properties also
  - Repeatable Reads
    - prevents fuzzy reads
    - will be called "Cut Isolation", "Item Cut Isolation" and "Predicate Cut Isolation"
- ACID atomicity guarantees
  - Monotonic Atomic View
    - once some effects of transaction Ti are observed by Tj, all effects of Ti will be observed by Tj
    - Prevents Read Skew anomalies
- Session guarantees
  - an abstraction of a sequence of operations performed during the execution of the application
  - Monotonic reads require that, within a session, subsequent reads to a given object "never return any previous values"
  - Monotonic writes require that, writes become visible in the order they are submitted
  - Write Follows Reads, the "happens before" relationship between transactions
  - without stickiness, write may be done on an out of date replica
  - with stickiness, we will three more guarantees
    - Read your writes
    - PRAM, serialization all operation(both reads and writes) within the session, combination of monotonic reads, monotonic writes and read your writes
    - Causal Consistency, PRAM with write-follow-reads
- Addition Guarantees
  - Consistency
  - Convergence
**** Unachievable HAT semantics
- ACID Isolation
  - Lost Update
  - Write Skew
    - generalization of Lost Update
  - Consistent Read, Snapshot Isolation, Cursor Stability are not achievable because they prevent Lost Update
  - Repeatable Read and One-Copy Serializability need to prevent both Lost Update and Write Skew
- Recency gurantees
  - not possible, like linearizability
 

